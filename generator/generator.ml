open ListApis_t

(* Generated code goes here *)
let output = ref "generated"

let finally f g =
  try
    let result = f () in
    g ();
    result
  with e ->
    g ();
    raise e

let with_output_channel filename f =
  let oc = open_out (Filename.concat !output filename) in
  finally (fun () -> f oc) (fun () -> close_out oc)

let api_ml { name; description; isasync; related; params; response } =
  with_output_channel (name ^ ".ml")
    (fun oc ->
      output_string oc "(* THIS FILE IS AUTOGENERATED FROM THE CLOUDSTACK API - DO NOT EDIT\n";
      output_string oc "\n";
      output_string oc "module Args = struct\n";
      output_string oc "  let pairs _ = []\n";
      output_string oc "end\n";
      output_string oc "\n";
      output_string oc "let request common args =\n";
      output_string oc "  let pairs = Common.pairs common @ (Args.pairs args) in\n";
      output_string oc (Printf.sprintf "  Common.uri common \"%s\" pairs\n" name);
    ) 

let apis_ml { listapisresponse = { api = all } } = List.iter api_ml all

let string_of_file filename =
  let ic = open_in filename in
  let output = Buffer.create 1024 in
  try
    while true do
      let block = String.make 4096 '\000' in
      let n = input ic block 0 (String.length block) in
      if n = 0 then raise End_of_file;
      Buffer.add_substring output block 0 n
    done;
    "" (* never happens *)
  with End_of_file ->
    close_in ic;
    Buffer.contents output

let _ =
  let json = ref "" in
  Arg.parse [
   "-json", Arg.Set_string json, "json-encoded response of listApis command";
   "-generated", Arg.Set_string output, Printf.sprintf "output directory for generated code (default: %s)" !output;
  ] (fun x -> Printf.fprintf stderr "Ignoring argument: %s\n" x)
  "Generate OCaml CloudStack bindings from the CloudStack API introspection API";
  if !json = "" then begin
    Printf.fprintf stderr "Please supply a -json parameter\n";
    exit 1;
  end;
  let text = string_of_file !json in
  let t = ListApis_j.t_of_string text in
  (* TODO: consider grouping the APIs the same way they appear in the online
   * docs *)
  (* Generate API bindings *)
  apis_ml t
