open ListApis_t

(* Generated code goes here *)
let output = ref "generated"

let finally f g =
  try
    let result = f () in
    g ();
    result
  with e ->
    g ();
    raise e

let with_output_channel filename f =
  let oc = open_out (Filename.concat !output filename) in
  finally (fun () -> f oc) (fun () -> close_out oc)

let name_of_param p = p.name (* TODO: escape OCaml keywords *)

let type_of_param p = match p.ty with
  | "string" -> "string"
  | "uuid" -> "Common.Uuid.t"
  | "boolean" -> "bool"
  | "integer" -> "int"
  | "long" -> "int64"
  | "short" -> "int" (* int16 *)
  | "map" -> "(string * string) list"
  | "date" -> "Common.Date.t"
  | "tzdate" -> "Common.Tzdate.t"
  | "list" -> "string list"
  | x -> failwith x

let output_param_type_decl write name params =
  write (Printf.sprintf "type %s = {\n" name);
  List.iter (fun p ->
    write (Printf.sprintf "  %s: %s;\n" (name_of_param p) (type_of_param p))
  ) params;
  write "}\n"

let api_ml { api_name; api_description; isasync; api_related; params; responses } =
  with_output_channel (api_name ^ ".ml")
    (fun oc ->
      output_string oc "(* THIS FILE IS AUTOGENERATED FROM THE CLOUDSTACK API - DO NOT EDIT\n";
      output_string oc "\n";
      output_string oc "module Args = struct\n";
      output_param_type_decl (fun x -> output_string oc ("  " ^ x)) "t" params;
      output_string oc "  let pairs _ = []\n";
      output_string oc "end\n";
      output_string oc "\n";
      output_string oc "let request common args =\n";
      output_string oc "  let pairs = Common.pairs common @ (Args.pairs args) in\n";
      output_string oc (Printf.sprintf "  Common.uri common \"%s\" pairs\n" api_name);
    ) 

let apis_ml { listapisresponse = { api = all } } = List.iter api_ml all

let string_of_file filename =
  let ic = open_in filename in
  let output = Buffer.create 1024 in
  try
    while true do
      let block = String.make 4096 '\000' in
      let n = input ic block 0 (String.length block) in
      if n = 0 then raise End_of_file;
      Buffer.add_substring output block 0 n
    done;
    "" (* never happens *)
  with End_of_file ->
    close_in ic;
    Buffer.contents output

let _ =
  let json = ref "" in
  Arg.parse [
   "-json", Arg.Set_string json, "json-encoded response of listApis command";
   "-generated", Arg.Set_string output, Printf.sprintf "output directory for generated code (default: %s)" !output;
  ] (fun x -> Printf.fprintf stderr "Ignoring argument: %s\n" x)
  "Generate OCaml CloudStack bindings from the CloudStack API introspection API";
  if !json = "" then begin
    Printf.fprintf stderr "Please supply a -json parameter\n";
    exit 1;
  end;
  let text = string_of_file !json in
  let t = ListApis_j.t_of_string text in
  (* TODO: consider grouping the APIs the same way they appear in the online
   * docs *)
  (* Generate API bindings *)
  apis_ml t
