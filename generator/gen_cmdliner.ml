open ListApis_t

open Utils

let cmdliner_type_of_param p = match p.ty with
  | "string" -> "string"
  | "uuid" -> "string"
  | "boolean" -> "bool"
  | "integer" -> "int";
  | "long" -> "Int64";
  | "short" -> "int";
  | "map" -> "string";
  | "date" -> "string";
  | "tzdate" -> "string";
  | "list" -> "String.concat \",\""
  | x -> failwith x

let cmdliner_default_of_param p =
  if not(p.required) then "None" else match p.ty with
  | "string" -> "\"\""
  | "uuid" -> "\"\""
  | "boolean" -> "false"
  | "integer" -> "0";
  | "long" -> "0L";
  | "short" -> "0";
  | "map" -> "\"\"";
  | "date" -> "\"\"";
  | "tzdate" -> "\"\"";
  | "list" -> "\"\""
  | x -> failwith x

(* A commandliner term to construct the arguments *)
let output_term write { api_name; params } =
  write (Printf.sprintf "let %s_term =\n" (ocaml_escape api_name));
  let indent x = write ("  " ^ x) in
  let indent2 x = write ("    " ^ x) in
  List.iter
    (fun p ->
      indent (Printf.sprintf "let %s =\n" (name_of_param p));
      indent2 (Printf.sprintf "let doc = \"%s\" in\n" p.description);
      indent2 (Printf.sprintf "Arg.(value & %s %s & info [ \"%s\" ] ~docv:\"%s\" ~doc) in\n"
        (cmdliner_type_of_param p) (cmdliner_default_of_param p)
        p.name (String.uppercase p.name));
    ) params;
  indent (Printf.sprintf "Term.(pure %s.Internal.make_opt %s)"
    (ocaml_module api_name)
    (String.concat "" (List.map (fun p -> Printf.sprintf "$ %s " (name_of_param
    p)) params)));
  write "\n\n"

let apis_ml { listapisresponse = { api = all } } =
  with_output_channel "cmdliner_commands.ml"
    (fun oc ->
      let write = output_string oc in
      autogenerated_banner write;
      List.iter (fun api ->
        output_term write api
      ) all
    )
