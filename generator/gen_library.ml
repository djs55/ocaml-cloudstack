open ListApis_t
open Utils

(* Generated code goes here *)
let output = ref "generated"

let type_of_param p =
  let base = match p.ty with
  | "string" -> "string"
  | "uuid" -> "Common.Uuid.t"
  | "boolean" -> "bool"
  | "integer" -> "int"
  | "long" -> "int64"
  | "short" -> "int" (* int16 *)
  | "map" -> "(string * string) list"
  | "date" -> "Common.Date.t"
  | "tzdate" -> "Common.Tzdate.t"
  | "list" -> "string list"
  | x -> failwith x in
  if p.required then base else base ^ " option"

let param_to_string p = match p.ty with
  | "string" -> "" (* or fun x -> x *)
  | "uuid" -> "Common.Uuid.to_string"
  | "boolean" -> "string_of_bool"
  | "integer" -> "string_of_int";
  | "long" -> "Int64.to_string";
  | "short" -> "string_of_int";
  | "map" -> "(fun vs -> String.concat \",\" (List.map (fun (k, v) -> k ^ \"=\" ^ v) vs))"
  | "date" -> "Common.Date.to_string"
  | "tzdate" -> "Common.Tzdate.to_string"
  | "list" -> "String.concat \",\""
  | x -> failwith x

(* Request arguments are represented as a record Args.t *)
let output_param_type_decl write name params =
  write (Printf.sprintf "type %s = {\n" name);
  List.iter (fun p ->
    write (Printf.sprintf "  %s: %s;\n" (name_of_param p) (type_of_param p))
  ) params;
  write "}\n"

let output_param_pairs write params =
  write "let pairs t =\n";
  List.iter (fun p ->
    if p.required
    then write (Printf.sprintf "  let %s = [ \"%s\", %s t.%s ]"
      (name_of_param p) p.name (param_to_string p) (name_of_param p))
    else write (Printf.sprintf "  let %s = match t.%s with None -> [] | Some v -> [ \"%s\", %s v ]"
      (name_of_param p) (name_of_param p) p.name (param_to_string p));
    write " in\n";
  ) params;
  write (Printf.sprintf "  %s\n" (String.concat " @ " (List.map name_of_param params)))

(* A 'constructor' with no labels, suitable for a cmdliner term *)
let output_param_make_opt write params =
  write "module Internal = struct\n";
  let inner x = write ("  " ^ x) in
  inner "let make_opt\n";
  List.iter (fun p ->
    inner (Printf.sprintf "  %s\n" (name_of_param p))
  ) params;
  inner "  = {\n";
    List.iter (fun p ->
      inner (Printf.sprintf "  %s = %s\n" (name_of_param p) (name_of_param p))
    ) params;
  inner "}\n";
  write "end\n"

(* A 'constructor' suitable for humans, where every argument is labelled
 * and non-'required' arguments are optional. *)
let output_param_make write params =
  write "let make\n";
  List.iter (fun p ->
    if p.required
    then write (Printf.sprintf "  ~%s\n" (name_of_param p))
    else write (Printf.sprintf "  ?%s\n" (name_of_param p))
  ) params;
  write " () = Internal.make_opt ";
  List.iter (fun p ->
    write (Printf.sprintf "  %s\n" (name_of_param p))
  ) params

let api_ml { api_name; api_description; isasync; api_related; params; responses } =
  with_output_channel (api_name ^ ".ml")
    (fun oc ->
      let write = output_string oc in
      autogenerated_banner write;
      write "module Args = struct\n";
      let inner x = write ("  " ^ x) in
      output_param_type_decl inner "t" params;
      output_param_pairs     inner params;
      output_param_make_opt  inner params;
      output_param_make      inner params;
      write "end\n";
      write "\n";
      write "let request common args =\n";
      write "  let pairs = Common.pairs common @ (Args.pairs args) in\n";
      write (Printf.sprintf "  Common.uri common \"%s\" pairs\n" api_name);
    ) 

let apis_ml { listapisresponse = { api = all } } = List.iter api_ml all

let api_mli { api_name; api_description; isasync; api_related; params; responses } =
  with_output_channel (api_name ^ ".mli")
    (fun oc ->
      let write = output_string oc in
      autogenerated_banner write;
      write "module Args : sig\n";
      write (Printf.sprintf "  (** The arguments for the API: %s *)\n" api_name);
      write "\n";
      write "  type t\n";
      write "  (** A set of arguments, ready to marshal *)\n";
      write "\n";
      write (Printf.sprintf "  val make_opt: %s -> t\n" (String.concat " -> " (List.map type_of_param params)));
      write "  (** Construct a set of arguments, intended for use by cmdliner. *)\n";
      write "\n";
      write "  val make: ";
      List.iter (fun p ->
        write (Printf.sprintf "%s%s:%s ->" (if p.required then "~" else "?") (name_of_param p) (type_of_param p))
      ) params;
      write " () -> t";
      write "  (** Construct a set of arguments\n";
      List.iter (fun p ->
        write (Printf.sprintf "  @param %s %s\n" (name_of_param p) p.description)
      ) params;
      write "  *)\n";
      write "end\n";
      write "\n";
      write "val request: Common.t -> Args.t -> Uri.t\n";
      write "(** Construct a request URI *)\n";
    )

let apis_mli { listapisresponse = { api = all } } = List.iter api_mli all
